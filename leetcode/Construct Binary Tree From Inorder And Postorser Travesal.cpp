#include <iostream>#include <vector>#include <cstring>#include <queue>using namespace std;struct ListNode {    int val;    ListNode *next;    ListNode(int x) : val(x), next(NULL) {}};struct TreeNode {    int val;    TreeNode *left;    TreeNode *right;    TreeNode(int x) : val(x), left(NULL), right(NULL) {}};class Solution {public:    vector<int >  t1,t2;    TreeNode *build(int i,int j,int m,int n){        if(i>j)            return NULL;        int k;        for(k=i;k<=j;k++){            if(t1[k]==t2[n])                break;        }        //cout<<i<<" "<<j<<" "<<t1[k]<<endl;        TreeNode *new_node=new TreeNode(t1[k]);        new_node->left=build(i,k-1,m,m+(k-i-1));        new_node->right=build(k+1,j,m+(k-i),n-1);        return new_node;    }    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {        if(inorder.size()==0||postorder.size()==0)            return NULL;        t1=inorder;        t2=postorder;        return build(0,inorder.size()-1,0,postorder.size()-1);    }};int main(){   /* TreeNode t1(1);    TreeNode t2(2);    t1.left=&t2;    TreeNode t3(3);    t1.right=&t3;    //TreeNode t4(0);    */    vector<int> in;    in.push_back(2);    in.push_back(1);    in.push_back(3);    vector<int> post;    post.push_back(2);    post.push_back(3);    post.push_back(1);    Solution s;    TreeNode * f=s.buildTree(in,post);    TreeNode * f1=f;    while(f){        cout<<f->val<<endl;        f=f->right;    }    cout<<"========="<<endl;    while(f1){        cout<<f1->val<<endl;        f1=f1->left;    }  /*  for(int i=0;i<f.size();i++){        for(int j=0;j<f[i].size();j++)        {            cout<<f[i][j]<<" ";        }        cout<<endl;    }    */    return 0;}